name: Publish crates

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Dry run (no publish)"
        required: false
        default: "true"
      token:
        description: "crates.io token (optional; use only for manual runs)"
        required: false
        default: ""

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Publish in dependency order
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          # Allow passing token via workflow_dispatch inputs (fallback when repo secret is not configured)
          if [[ -n "${{ github.event.inputs.token }}" ]]; then
            export CARGO_REGISTRY_TOKEN='${{ github.event.inputs.token }}'
          fi
          dry=${{ inputs.dry_run }}
          publish_with_retry() {
            local pkg="$1"
            local tries=0 max_tries=12
            local delay=60 # base delay secs between attempts
            while (( tries < max_tries )); do
              echo "::group::Publishing $pkg (attempt $((tries+1))/$max_tries)"
              if [[ "$dry" == "true" ]]; then
                if cargo publish -p "$pkg" --dry-run; then
                  echo "Dry-run OK: $pkg"; echo "::endgroup::"; return 0
                fi
              else
                if cargo publish -p "$pkg"; then
                  echo "Published: $pkg"; echo "::endgroup::"; return 0
                fi
              fi
              rc=$?
              echo "Publish failed (rc=$rc). Inspecting error..."
              echo "::endgroup::"
              # crates.io may throttle with 429 for new crates; back off and retry
              tries=$((tries+1))
              sleep $((delay * tries))
            done
            echo "Exceeded max retries for $pkg" >&2
            return 1
          }

          # Publish in dependency order with spacing to avoid rate limits
          publish_with_retry rimloc-core
          sleep 30
          publish_with_retry rimloc-parsers-xml || true
          sleep 30
          publish_with_retry rimloc-export-csv || true
          sleep 30
          publish_with_retry rimloc-export-po || true
          sleep 30
          publish_with_retry rimloc-import-po || true
          sleep 60
          publish_with_retry rimloc-validate || true
          sleep 60
          publish_with_retry rimloc-cli || true
