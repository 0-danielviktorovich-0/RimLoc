name: Nightly Dev Pre-release

on:
  push:
    branches: [ develop ]

permissions:
  contents: write
  id-token: write

concurrency:
  group: release-dev-auto-${{ github.ref }}
  cancel-in-progress: true

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.meta.outputs.tag }}
      body: ${{ steps.meta.outputs.body }}
      name: ${{ steps.meta.outputs.name }}
    steps:
      - uses: actions/checkout@v4
      - name: Compute tag and body
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' crates/rimloc-cli/Cargo.toml | head -n1)
          SHORT_SHA=${GITHUB_SHA::7}
          TAG="v${VERSION}-dev.${SHORT_SHA}"
          NAME="Nightly dev pre-release ${TAG}"
          cat > body.txt <<EOF
          Automated dev pre-release build

          Commit: ${GITHUB_SHA}
          Short SHA: ${SHORT_SHA}

          Artifacts (bundled per target):
          - One archive per target containing CLI binary and GUI native package
          - Linux: x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu, x86_64-unknown-linux-musl (GUI skipped on musl)
          - macOS: x86_64-apple-darwin, aarch64-apple-darwin
          - Windows: x86_64-pc-windows-msvc, aarch64-pc-windows-msvc
          EOF
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "name=${NAME}" >> "$GITHUB_OUTPUT"
          echo "body<<BODY" >> "$GITHUB_OUTPUT"
          cat body.txt >> "$GITHUB_OUTPUT"
          echo "BODY" >> "$GITHUB_OUTPUT"
      - name: Create or update pre-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.name }}
          prerelease: true
          draft: false
          generate_release_notes: true
          body: ${{ steps.meta.outputs.body }}

  linux:
    needs: create_release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            builder: cargo
          - target: aarch64-unknown-linux-gnu
            builder: cargo
          - target: x86_64-unknown-linux-musl
            builder: cargo
          - target: aarch64-unknown-linux-musl
            builder: cross
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          prefix-key: ${{ matrix.target }}
      - name: Install cross toolchains (Linux)
        if: matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then sudo apt-get install -y gcc-aarch64-linux-gnu; fi
          if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then sudo apt-get install -y musl-tools; fi
      - name: Install Tauri Linux build deps (GUI)
        if: endsWith(matrix.target, '-unknown-linux-gnu')
        run: |
          sudo apt-get update
          if sudo apt-get install -y libwebkit2gtk-4.1-dev; then echo "Installed webkit2gtk 4.1"; else sudo apt-get install -y libwebkit2gtk-4.0-dev; fi
          sudo apt-get install -y libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
      - name: Install cross
        if: matrix.builder == 'cross'
        run: cargo install cross --locked
      - name: Build (CLI)
        env:
          CARGO_TERM_COLOR: always
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: |
          if [[ "${{ matrix.builder }}" == "cross" ]]; then cross build --release -p rimloc-cli --target ${{ matrix.target }}; else cargo build --release -p rimloc-cli --target ${{ matrix.target }}; fi
      - name: Install tauri-cli (GUI packaging)
        if: endsWith(matrix.target, '-unknown-linux-gnu')
        run: cargo install tauri-cli --locked
      - name: Bundle GUI package (AppImage)
        if: endsWith(matrix.target, '-unknown-linux-gnu')
        run: |
          pushd gui/tauri-app
          cargo tauri build --target ${{ matrix.target }} --bundles appimage
          popd
      - name: Package (bundle CLI+GUI)
        shell: bash
        run: |
          set -euo pipefail
          NAME=rimloc-${{ needs.create_release.outputs.tag }}-${{ matrix.target }}
          ROOT="$NAME"
          mkdir -p dist "$ROOT/cli" "$ROOT/gui"
          install -m 0755 "target/${{ matrix.target }}/release/rimloc-cli" "$ROOT/cli/"
          if [[ "${{ matrix.target }}" == *"-unknown-linux-gnu" ]]; then
            BDIR="gui/tauri-app/src-tauri/target/${{ matrix.target }}/release/bundle"
            BUNDLE=$(find "$BDIR" -type f \( -name "*.AppImage" -o -name "*.appimage" \) | head -n1 || true)
            if [[ -n "$BUNDLE" ]]; then cp "$BUNDLE" "$ROOT/gui/"; fi
          fi
          cp -a README.md LICENSE "$ROOT/"
          tar -C "$ROOT" -czf "dist/$NAME.tar.gz" .
          echo "Built dist/$NAME.tar.gz"
      # No separate checksums for dev pre-release; GitHub UI shows sha256
      - name: Upload assets (retry via gh)
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          TAG=${{ needs.create_release.outputs.tag }}
          shopt -s nullglob
          files=(dist/*)
          echo "Uploading ${#files[@]} assets to ${TAG}"
          for f in "${files[@]}"; do
            for attempt in 1 2 3 4 5; do
              if gh release upload "$TAG" "$f" --clobber -R "$GITHUB_REPOSITORY"; then
                echo "Uploaded: $f"
                break
              fi
              echo "WARN: upload failed for $f (attempt $attempt). Retrying..."
              sleep $((attempt*10))
              if [[ $attempt -eq 5 ]]; then
                echo "ERROR: giving up on $f" >&2
                exit 1
              fi
            done
          done

  macos:
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: macos-13
            target: x86_64-apple-darwin
          - runs-on: macos-14
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          prefix-key: ${{ matrix.target }}
      - name: Build (CLI)
        run: cargo build --release -p rimloc-cli --target ${{ matrix.target }}
      - name: Install tauri-cli (GUI packaging)
        run: cargo install tauri-cli --locked
      - name: Bundle GUI package (DMG)
        run: |
          pushd gui/tauri-app
          cargo tauri build --target ${{ matrix.target }} --bundles dmg
          popd
      - name: Package (bundle CLI+GUI)
        shell: bash
        run: |
          set -euo pipefail
          NAME=rimloc-${{ needs.create_release.outputs.tag }}-${{ matrix.target }}
          ROOT="$NAME"
          mkdir -p dist "$ROOT/cli" "$ROOT/gui"
          install -m 0755 "target/${{ matrix.target }}/release/rimloc-cli" "$ROOT/cli/"
          BDIR="gui/tauri-app/src-tauri/target/${{ matrix.target }}/release/bundle"
          BUNDLE=$(find "$BDIR" -type f -name "*.dmg" | head -n1 || true)
          if [[ -n "$BUNDLE" ]]; then cp "$BUNDLE" "$ROOT/gui/"; fi
          cp -a README.md LICENSE "$ROOT/"
          tar -C "$ROOT" -czf "dist/$NAME.tar.gz" .
          echo "Built dist/$NAME.tar.gz"
      # No separate checksums for dev pre-release; GitHub UI shows sha256
      - name: Upload assets (retry via gh)
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          TAG=${{ needs.create_release.outputs.tag }}
          shopt -s nullglob
          files=(dist/*)
          echo "Uploading ${#files[@]} assets to ${TAG}"
          for f in "${files[@]}"; do
            for attempt in 1 2 3 4 5; do
              if gh release upload "$TAG" "$f" --clobber -R "$GITHUB_REPOSITORY"; then
                echo "Uploaded: $f"
                break
              fi
              echo "WARN: upload failed for $f (attempt $attempt). Retrying..."
              sleep $((attempt*10))
              if [[ $attempt -eq 5 ]]; then
                echo "ERROR: giving up on $f" >&2
                exit 1
              fi
            done
          done

  windows:
    needs: create_release
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64-pc-windows-msvc, aarch64-pc-windows-msvc]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          prefix-key: ${{ matrix.target }}
      - name: Build (CLI)
        shell: bash
        run: cargo build --release -p rimloc-cli --target ${{ matrix.target }}
      - name: Install NSIS (Windows bundler)
        shell: powershell
        run: choco install nsis -y
      - name: Install tauri-cli (GUI packaging)
        shell: bash
        run: cargo install tauri-cli --locked
      - name: Bundle GUI package (NSIS)
        shell: bash
        run: |
          pushd gui/tauri-app
          cargo tauri build --target ${{ matrix.target }} --bundles nsis
          popd
      - name: Package (bundle CLI+GUI)
        shell: bash
        run: |
          set -euo pipefail
          NAME=rimloc-${{ needs.create_release.outputs.tag }}-${{ matrix.target }}
          ROOT="$NAME"
          mkdir -p dist "$ROOT/cli" "$ROOT/gui"
          cp "target/${{ matrix.target }}/release/rimloc-cli.exe" "$ROOT/cli/"
          BDIR="gui/tauri-app/src-tauri/target/${{ matrix.target }}/release/bundle"
          BUNDLE=$(find "$BDIR" -type f -name "*.exe" | head -n1 || true)
          if [[ -n "$BUNDLE" ]]; then cp "$BUNDLE" "$ROOT/gui/"; fi
          cp -a README.md LICENSE "$ROOT/"
          (cd "$ROOT" && 7z a -tzip "../dist/$NAME.zip" *)
          echo "Built dist/$NAME.zip"
      # No separate checksums for dev pre-release; GitHub UI shows sha256
      - name: Upload assets (retry via gh)
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          TAG=${{ needs.create_release.outputs.tag }}
          shopt -s nullglob
          files=(dist/*)
          echo "Uploading ${#files[@]} assets to ${TAG}"
          for f in "${files[@]}"; do
            for attempt in 1 2 3 4 5; do
              if gh release upload "$TAG" "$f" --clobber -R "$GITHUB_REPOSITORY"; then
                echo "Uploaded: $f"
                break
              fi
              echo "WARN: upload failed for $f (attempt $attempt). Retrying..."
              sleep $((attempt*10))
              if [[ $attempt -eq 5 ]]; then
                echo "ERROR: giving up on $f" >&2
                exit 1
              fi
            done
          done
