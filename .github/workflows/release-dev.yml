name: Release (dev pre-release)

on:
  workflow_dispatch:
    inputs:
      name:
        description: "Release name (optional)"
        required: false

permissions:
  contents: write
  id-token: write

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.meta.outputs.tag }}
      body: ${{ steps.meta.outputs.body }}
      name: ${{ steps.meta.outputs.name }}
    steps:
      - uses: actions/checkout@v4
      - name: Compute tag and body
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' crates/rimloc-cli/Cargo.toml | head -n1)
          SHORT_SHA=${GITHUB_SHA::7}
          TAG="v${VERSION}-dev.${SHORT_SHA}"
          NAME_INPUT=${{ toJson(inputs.name) }}
          if [[ -n ${NAME_INPUT//\"\"/} && ${NAME_INPUT} != "null" ]]; then
            NAME=${{ inputs.name }}
          else
            NAME="Dev pre-release ${TAG}"
          fi
          cat > body.txt <<EOF
          Dev pre-release build

          Commit: ${GITHUB_SHA}
          Short SHA: ${SHORT_SHA}

          Artifacts:
          - Linux: x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu, x86_64-unknown-linux-musl
          - macOS: x86_64-apple-darwin, aarch64-apple-darwin
          - Windows: x86_64-pc-windows-msvc, aarch64-pc-windows-msvc
          EOF
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "name=${NAME}" >> "$GITHUB_OUTPUT"
          echo "body<<BODY" >> "$GITHUB_OUTPUT"
          cat body.txt >> "$GITHUB_OUTPUT"
          echo "BODY" >> "$GITHUB_OUTPUT"
      - name: Create or update pre-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.name }}
          prerelease: true
          draft: false
          generate_release_notes: true
          body: ${{ steps.meta.outputs.body }}

  linux:
    needs: create_release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            builder: cargo
          - target: aarch64-unknown-linux-gnu
            builder: cargo
          - target: x86_64-unknown-linux-musl
            builder: cargo
          - target: aarch64-unknown-linux-musl
            builder: cross
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - name: Install cross toolchains (Linux)
        if: matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then sudo apt-get install -y gcc-aarch64-linux-gnu; fi
          if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then sudo apt-get install -y musl-tools; fi
      - name: Install cross
        if: matrix.builder == 'cross'
        run: cargo install cross --git https://github.com/cross-rs/cross
      - name: Build (rimloc-cli)
        env:
          CARGO_TERM_COLOR: always
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: |
          if [[ "${{ matrix.builder }}" == "cross" ]]; then cross build --release -p rimloc-cli --target ${{ matrix.target }}; else cargo build --release -p rimloc-cli --target ${{ matrix.target }}; fi
      - name: Package
        shell: bash
        run: |
          set -euo pipefail
          BIN=target/${{ matrix.target }}/release/rimloc-cli
          NAME=rimloc-cli-${{ needs.create_release.outputs.tag }}-${{ matrix.target }}
          mkdir -p dist "$NAME"
          install -m 0755 "$BIN" "$NAME/"
          cp -a README.md LICENSE "$NAME/"
          tar -C "$NAME" -czf "dist/$NAME.tar.gz" .
          cp "dist/$NAME.tar.gz" "dist/rimloc-cli-dev-latest-${{ matrix.target }}.tar.gz"
          echo "Built dist/$NAME.tar.gz"
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
      - name: Sign artifact (cosign keyless)
        shell: bash
        run: |
          set -euo pipefail
          NAME=rimloc-cli-${{ needs.create_release.outputs.tag }}-${{ matrix.target }}
          cosign sign-blob --yes \
            --output-signature "dist/$NAME.tar.gz.sig" \
            --output-certificate "dist/$NAME.tar.gz.pem" \
            "dist/$NAME.tar.gz"
      - name: Install Syft (SBOM)
        shell: bash
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sudo sh -s -- -b /usr/local/bin
      - name: Generate SBOM (SPDX)
        shell: bash
        run: |
          NAME=rimloc-cli-${{ needs.create_release.outputs.tag }}-${{ matrix.target }}
          syft packages "dist/$NAME.tar.gz" -o spdx-json > "dist/$NAME.spdx.json"
      - name: Checksums (SHA256)
        shell: bash
        run: |
          set -euo pipefail
          NAME=rimloc-cli-${{ needs.create_release.outputs.tag }}-${{ matrix.target }}
          (cd dist && sha256sum "$NAME.tar.gz" > "$NAME.tar.gz.sha256")
          (cd dist && sha256sum "rimloc-cli-dev-latest-${{ matrix.target }}.tar.gz" > "rimloc-cli-dev-latest-${{ matrix.target }}.tar.gz.sha256")
      - name: Upload assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create_release.outputs.tag }}
          files: |
            dist/*.tar.gz
            dist/*.zip

  macos:
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: macos-13
            target: x86_64-apple-darwin
          - runs-on: macos-14
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - name: Build (rimloc-cli)
        run: cargo build --release -p rimloc-cli --target ${{ matrix.target }}
      - name: Package
        shell: bash
        run: |
          set -euo pipefail
          BIN=target/${{ matrix.target }}/release/rimloc-cli
          NAME=rimloc-cli-${{ needs.create_release.outputs.tag }}-${{ matrix.target }}
          mkdir -p dist "$NAME"
          install -m 0755 "$BIN" "$NAME/"
          cp -a README.md LICENSE "$NAME/"
          tar -C "$NAME" -czf "dist/$NAME.tar.gz" .
          echo "Built dist/$NAME.tar.gz"
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
      - name: Sign artifact (cosign keyless)
        shell: bash
        run: |
          set -euo pipefail
          NAME=rimloc-cli-${{ needs.create_release.outputs.tag }}-${{ matrix.target }}
          cosign sign-blob --yes \
            --output-signature "dist/$NAME.tar.gz.sig" \
            --output-certificate "dist/$NAME.tar.gz.pem" \
            "dist/$NAME.tar.gz"
      - name: Install Syft (SBOM)
        shell: bash
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sudo sh -s -- -b /usr/local/bin
      - name: Generate SBOM (SPDX)
        shell: bash
        run: |
          NAME=rimloc-cli-${{ needs.create_release.outputs.tag }}-${{ matrix.target }}
          syft packages "dist/$NAME.tar.gz" -o spdx-json > "dist/$NAME.spdx.json"
      - name: Checksums (SHA256)
        shell: bash
        run: |
          set -euo pipefail
          NAME=rimloc-cli-${{ needs.create_release.outputs.tag }}-${{ matrix.target }}
          (cd dist && shasum -a 256 "$NAME.tar.gz" > "$NAME.tar.gz.sha256")
      - name: Upload assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create_release.outputs.tag }}
          files: dist/*

  windows:
    needs: create_release
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64-pc-windows-msvc, aarch64-pc-windows-msvc]
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - name: Build (rimloc-cli)
        shell: bash
        run: cargo build --release -p rimloc-cli --target ${{ matrix.target }}
      - name: Package
        shell: bash
        run: |
          set -euo pipefail
          BIN=target/${{ matrix.target }}/release/rimloc-cli.exe
          NAME=rimloc-cli-${{ needs.create_release.outputs.tag }}-${{ matrix.target }}
          mkdir -p dist "$NAME"
          cp "$BIN" "$NAME/"
          cp -a README.md LICENSE "$NAME/"
          (cd "$NAME" && 7z a -tzip "../dist/$NAME.zip" *)
          cp "dist/$NAME.zip" "dist/rimloc-cli-dev-latest-${{ matrix.target }}.zip"
          echo "Built dist/$NAME.zip"
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
      - name: Sign artifact (cosign keyless)
        shell: bash
        run: |
          set -euo pipefail
          NAME=rimloc-cli-${{ needs.create_release.outputs.tag }}-${{ matrix.target }}
          cosign sign-blob --yes \
            --output-signature "dist/$NAME.zip.sig" \
            --output-certificate "dist/$NAME.zip.pem" \
            "dist/$NAME.zip"
      - name: Install Syft (Windows)
        shell: powershell
        run: |
          $version = "v1.5.0"
          $ver = $version.TrimStart('v')
          $arch = "windows_amd64"
          if ("${{ matrix.target }}" -like "aarch64*") { $arch = "windows_arm64" }
          $url = "https://github.com/anchore/syft/releases/download/$version/syft_${ver}_${arch}.zip"
          Write-Host "Downloading Syft: $url"
          Invoke-WebRequest -Uri $url -OutFile syft.zip
          7z x syft.zip -o"$PWD\syft"
      - name: Generate SBOM (SPDX)
        shell: powershell
        run: |
          $NAME = "rimloc-cli-${{ needs.create_release.outputs.tag }}-${{ matrix.target }}"
          .\syft\syft.exe packages "dist/$NAME.zip" -o spdx-json | Out-File -FilePath "dist/$NAME.spdx.json" -Encoding utf8
      - name: Checksums (SHA256)
        shell: powershell
        run: |
          $NAME = "rimloc-cli-${{ needs.create_release.outputs.tag }}-${{ matrix.target }}"
          $h1 = (Get-FileHash "dist/$NAME.zip" -Algorithm SHA256).Hash
          Set-Content -Path "dist/$NAME.zip.sha256" -Value ("$h1  $NAME.zip")
          $h2 = (Get-FileHash "dist/rimloc-cli-dev-latest-${{ matrix.target }}.zip" -Algorithm SHA256).Hash
          Set-Content -Path "dist/rimloc-cli-dev-latest-${{ matrix.target }}.zip.sha256" -Value ("$h2  rimloc-cli-dev-latest-${{ matrix.target }}.zip")
      - name: Upload assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create_release.outputs.tag }}
          files: dist/*
